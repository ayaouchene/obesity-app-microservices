services:
  # üß† Auth Service
  auth-service:
    build: ../auth-service
    container_name: auth-service
    restart: always
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
    environment:
      - MONGO_URI=mongodb://mongodb:27017/authdb
      - JWT_SECRET=supersecretkey
      - PORT=5000
    networks:
      - obesity-net

  # üí¨ Chat Service
  chat-service:
    build: ../chat-service
    container_name: chat-service
    restart: always
    ports:
      - "5002:5002"
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      - MONGO_URI=mongodb://mongodb:27017/chatdb
      - KAFKA_BROKER=kafka:9092
      - JWT_SECRET=supersecretkey
      - PORT=5002
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    networks:
      - obesity-net

  # üìÖ Appointment Service
  appointment-service:
    build: ../appointment-service
    container_name: appointment-service
    restart: always
    ports:
      - "5001:5001"
    depends_on:
      - mongodb
      - kafka
    environment:
      - MONGO_URI=mongodb://mongodb:27017/appointmentdb
      - JWT_SECRET=supersecretkey
      - KAFKA_BROKER=kafka:9092
      - PORT=5001
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    networks:
      - obesity-net

  # ü©∫ Profile M√©decin Service
  profile-medecin-service:
    build:
      context: ../profile-medecin-service
      dockerfile: Dockerfile
    container_name: profile-medecin-service
    restart: always
    ports:
      - "5003:5003"
    depends_on:
      - mongodb
      - kafka
    environment:
      - NODE_ENV=production
      - JWT_SECRET=supersecretkey  # ‚≠êÔ∏è AJOUTEZ CETTE LIGNE ‚≠êÔ∏è
      - MONGO_URI=mongodb://mongodb:27017/profiledb  # Recommand√© si MongoDB est utilis√©
      - PORT=5003  # Pour coh√©rence
    volumes:
      - ../profile-medecin-service:/usr/src/app
    networks:
      - obesity-net
      
  # üêò MongoDB
  mongodb:
    image: mongo:7
    container_name: mongodb
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.runCommand(\"ping\").ok' | mongosh --quiet --port 27017"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 40s
    networks:
      - obesity-net

  # üöÄ Kafka avec KRaft mode
  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_KRAFT_CLUSTER_ID=J4g2h8xQTOyV5kL9mN7pZw
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - obesity-net

  # üß≠ Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=obesity-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - obesity-net

  # üåê Gateway API
  gateway-api:
    build: ../gateway-api
    container_name: gateway-api
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - chat-service
      - appointment-service
    networks:
      - obesity-net

volumes:
  kafka_data:
  mongo_data:

networks:
  obesity-net:
    driver: bridge
